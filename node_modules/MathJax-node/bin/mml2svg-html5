#! /usr/bin/env node

/*************************************************************************
 *
 *  mml2svg-html5
 *
 *  Reads an HTML5 file from stdin that contains MathML
 *  and writes a new HTML5 document to stdout that
 *  contains SVG versions of the math instead.
 *
 * ----------------------------------------------------------------------
 *
 *  Copyright (c) 2014 The MathJax Consortium
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

var typeset = require("../lib/mj-single.js").typeset;
var fs = require('fs');
var jsdom = require('jsdom').jsdom;

//
//  Produce a Usage message, if needed
//
if (process.argv.length !== 2) {
  console.error("Usage: mml2svg-html5 <input.html > output.html");
  process.exit(1);
}

//
//  Process an HTML file:
//    Find all math elements,
//    Loop through them, and make typeset calls for each math tag,
//      If the MathML processes correctly,
//        replace the math tag by the svg result.
//      If this is the last one,
//        do the callback with the complete page.
//
function processHTML(html,callback) {
  var document = jsdom(html);
  var math = document.getElementsByTagName("math");
  var data = {math:, format:"MathML", svg:true; state:{}};
  for (var i = 0, m = math.length; i < m; i++) {
    typeset(data,(function (node,last) {return function (result) {
      data.math = math[i].outerHTML;
      if (result.svg) {
        var span = document.createElement("span");
        span.innerHTML = result.svg;
        node.parentNode.replaceChild(span.firstChild,node);
      }
      if (last) {callback(document.outerHTML)}
    }})(math[i],i == m-1));
  }
}

//
//  Read the input file and collect the file contents
//  When done, process the HTML.
//
var html = [];
process.stdin.on("readable",function (block) {
  var chunk = process.stdin.read();
  html.push(chunk.toString('utf8'));
});
process.stdin.on("end",function () {
  processHTML(html.join(""), function(html) {
    process.stdout.write(html);
  });
});

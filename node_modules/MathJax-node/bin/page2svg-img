#! /usr/bin/env node

/************************************************************************
 *
 *  page2svg
 *
 *  Reads an HTML5 file from stdin that contains math
 *  and writes a new HTML5 document to stdout that
 *  contains SVG versions of the math instead.
 *
 * ----------------------------------------------------------------------
 *
 *  Copyright (c) 2014 The MathJax Consortium
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

var typeset = require("../lib/mj-page.js").typeset;
var fs = require('fs');
var jsdom = require('jsdom').jsdom;

//
//  Produce a Usage message, if needed
//
if (process.argv.length !== 3) {
  console.error("Usage: page2svg-img 'svg-file-prefix' < input.html > output.html");
  process.exit(1);
}

var prefix = process.argv[2]; // the file prefix

//
//  Process an HTML file:
//
function processHTML(html,callback) {
  var document = jsdom(html);
  typeset({html:document.body.innerHTML, imgSVG:true}, function (result) {
    document.body.innerHTML = result.html;
    document.head.appendChild(document.body.firstChild);
    var img = document.getElementsByClassName("MathJax_SVG_IMG");
    for (var i = 0, m = img.length; i < m; i++) {
      var N = (i+1).toString(); while (N.length < 3) {N = "0"+N}
      var file = prefix+N+".svg";
      var svg = [
        '<?xml version="1.0" standalone="no"?>',
        '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">',
        new Buffer(img[i].src.replace(/^.*?,/,""),"base64").toString("utf-8")
      ].join("\n");
      fs.writeFileSync(file,svg);
      img[i].src = file;
    }
    var HTML = "<!DOCTYPE html>\n"+document.outerHTML.replace(/^(\n|\s)*/,"");
    callback(HTML);
  });
}

//
//  Read the input file and collect the file contents
//  When done, process the HTML.
//
var html = [];
process.stdin.on("readable",function (block) {
  var chunk = process.stdin.read();
  html.push(chunk.toString('utf8'));
});
process.stdin.on("end",function () {
  processHTML(html.join(""), function(html) {
    process.stdout.write(html);
  });
});
